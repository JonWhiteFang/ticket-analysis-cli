[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ticket-analyzer"
version = "1.0.0"
description = "A secure CLI tool for analyzing ticket data from Amazon's internal systems"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Amazon Development Team", email = "dev-team@amazon.com"}
]
maintainers = [
    {name = "Amazon Development Team", email = "dev-team@amazon.com"}
]
keywords = ["ticket", "analysis", "cli", "amazon", "mcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
requires-python = ">=3.7"
dependencies = [
    "click>=7.0,<9.0",
    "pandas>=1.0.0,<2.0.0",
    "tqdm>=4.50.0,<5.0.0",
    "colorama>=0.4.3,<1.0.0",
    "jinja2>=2.11.0,<4.0.0",
    "matplotlib>=3.1.0,<4.0.0",
    "seaborn>=0.11.0,<1.0.0",
    "typing-extensions>=3.7.4; python_version<'3.8'",
    "dataclasses>=0.6; python_version<'3.7'",
    "cryptography>=3.0.0,<4.0.0",
    "pyyaml>=5.3.0,<7.0.0",
    "toml>=0.10.0,<1.0.0",
    "structlog>=20.1.0,<24.0.0",
    "requests>=2.25.0,<3.0.0",
    "urllib3>=1.26.0,<2.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "numpy>=1.19.0,<2.0.0; python_version>='3.7'",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0,<8.0.0",
    "pytest-cov>=2.10.0,<4.0.0",
    "pytest-mock>=3.3.0,<4.0.0",
    "black>=21.0.0,<24.0.0",
    "flake8>=3.8.0,<7.0.0",
    "isort>=5.0.0,<6.0.0",
    "mypy>=0.800,<2.0.0",
    "bandit>=1.7.0,<2.0.0",
    "safety>=1.10.0,<3.0.0",
    "pre-commit>=2.10.0,<4.0.0",
]
docs = [
    "sphinx>=3.5.0,<8.0.0",
    "sphinx-rtd-theme>=0.5.0,<2.0.0",
]
test = [
    "pytest>=6.0.0,<8.0.0",
    "pytest-cov>=2.10.0,<4.0.0",
    "pytest-mock>=3.3.0,<4.0.0",
    "pytest-asyncio>=0.15.0,<1.0.0",
    "pytest-xdist>=2.2.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/amazon/ticket-analyzer"
Documentation = "https://ticket-analyzer.readthedocs.io/"
Repository = "https://github.com/amazon/ticket-analyzer.git"
"Bug Tracker" = "https://github.com/amazon/ticket-analyzer/issues"

[project.scripts]
ticket-analyzer = "ticket_analyzer.cli.main:cli"

[tool.setuptools]
packages = ["ticket_analyzer"]

[tool.setuptools.package-dir]
ticket_analyzer = "ticket_analyzer"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ticket_analyzer"]
known_third_party = ["click", "pandas", "tqdm", "colorama", "jinja2", "matplotlib", "seaborn"]

# mypy configuration
[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "matplotlib.*",
    "seaborn.*",
    "tqdm.*",
    "colorama.*",
    "jinja2.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov=ticket_analyzer",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["ticket_analyzer"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args for tests

# flake8 configuration (in setup.cfg format for compatibility)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]